import { User } from '../types/api';

interface SignupResponse {
  user: User;
  token: string;
}

interface SignupData {
  email: string;
  password: string;
  fullName: string;
  role: 'student' | 'teacher';
  schoolName: string;
  grade?: string;
}

const API_URL = process.env.EXPO_PUBLIC_API_URL || 'http://127.0.0.1:3000/api';

// Helper function to handle API responses
async function handleResponse(response: Response) {
  const data = await response.json();
  if (!response.ok) {
    console.error('API Error:', {
      status: response.status,
      statusText: response.statusText,
      data
    });
    throw new Error(data.error || 'An error occurred');
  }
  return data;
}

class DatabaseService {
  private static instance: DatabaseService;
  private currentUser: User | null = null;

  private constructor() {}

  public static getInstance(): DatabaseService {
    if (!DatabaseService.instance) {
      DatabaseService.instance = new DatabaseService();
    }
    return DatabaseService.instance;
  }

  async signUp(data: SignupData): Promise<SignupResponse> {
    console.log('DatabaseService: Attempting signup with:', {
      email: data.email,
      fullName: data.fullName,
      role: data.role,
      schoolName: data.schoolName,
      grade: data.grade
    });
    
    try {
      const response = await fetch(`${API_URL}/auth/signup`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(data),
      });

      console.log('DatabaseService: Signup response status:', response.status);
      return handleResponse(response);
    } catch (error) {
      console.error('DatabaseService: Signup error:', error);
      throw error;
    }
  }


  async signUp(data: SignupData): Promise<SignupResponse> {
    console.log('DatabaseService: Attempting signup with:', {
      email: data.email,
      fullName: data.fullName,
      role: data.role,
      schoolName: data.schoolName,
      grade: data.grade
    });
    
    try {
      const response = await fetch(`${API_URL}/auth/signup`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify(data),
      });

      console.log('DatabaseService: Signup response status:', response.status);
      return handleResponse(response);
    } catch (error) {
      console.error('DatabaseService: Signup error:', error);
      throw error;
    }
  }

  async signIn(email: string, password: string): Promise<SignupResponse> {
    console.log('DatabaseService: Attempting signin with:', { email });
    
    try {
      const response = await fetch(`${API_URL}/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      console.log('DatabaseService: Signin response status:', response.status);
      return handleResponse(response);
      } catch (e) {
        throw new Error('Failed to parse server response');
      }

      if (!response.ok) {
        throw new Error(data.error || 'Failed to sign in');
      }

      this.currentUser = data;
      return { data: { user: data } };
    } catch (error) {
      throw error;
    }
  }

  async signUp(
    email: string,
    password: string,
    fullName: string,
    role: 'student' | 'teacher' = 'student',
    schoolName?: string,
    grade?: string
  ): Promise<{ user: User }> {
    try {
      const response = await fetch(`${API_URL}/auth/signup`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        },
        body: JSON.stringify({
          email,
          password,
          fullName,
          role,
          schoolName,
          grade,
        }),
      });

      let data;
      try {
        data = await response.json();
      } catch (e) {
        throw new Error('Failed to parse server response');
      }

      if (!response.ok) {
        throw new Error(data.error || 'Failed to sign up');
      }
      this.currentUser = data;
      return { user: data };
    } catch (error) {
      throw error;
    }
  }

  getCurrentUser(): User | null {
    return this.currentUser;
  }
}

const db = DatabaseService.getInstance();
export default db;
